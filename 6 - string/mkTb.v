//
// Generated by Bluespec Compiler (build 00185f79)
//
// On Sat Apr 10 18:37:47 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register step
  reg [31 : 0] step;
  wire [31 : 0] step$D_IN;
  wire step$EN;

  // register step
  assign step$D_IN = step + 32'd1 ;
  assign step$EN = step == 32'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        step <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (step$EN) step <= `BSV_ASSIGNMENT_DELAY step$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    step = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("=== step 0 ===");
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("first string = ", "This is a test");
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0)
	$display("Second string = ", "This is a test of concatenation");
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0)
	$display("passString => ", "String passed to a function");
    if (RST_N != `BSV_RESET_VALUE) if (step == 32'd1) $display("All done");
    if (RST_N != `BSV_RESET_VALUE) if (step == 32'd1) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTb

